package autoloanapp;
import java.util.Scanner;

public class AutoLoanApp {

    //root pointer
    private static memberNode rootID;
    private static int lastID;
    
    //memberNode method definition
    private class memberNode {
        private int memberID; //member ID number
        private double monthlyIncome;
        private int creditScore;
        
        private memberNode firstChild;
        private memberNode nextSibling;
        
        //memberNode method initializer
        public memberNode(int rootID_in, double income_in, int cscore_in) {
            this.memberID = rootID_in;
            this.monthlyIncome = income_in;
            this.creditScore = cscore_in;
            
        }
    }
    
    //method to add new bank members aka insert new node
    public void newMember(int new_ID_in, double new_income_in, int new_cscore_in) {
        rootID = newMemberRecursive(rootID, new_ID_in, new_income_in, new_cscore_in);
    }
    
    //newMemberRecursive method definition
    public memberNode newMemberRecursive(memberNode rootID_val, int new_ID_val, double new_income_val, int new_cscore_val) {
        if(rootID_val == null) {
            rootID_val = new memberNode(new_ID_val, new_income_val, new_cscore_val);
            return rootID_val;
        }
        if(new_ID_val < rootID_val.memberID) {
            rootID_val.firstChild = newMemberRecursive(rootID_val.firstChild, new_ID_val, new_income_val, new_cscore_val);
        } else {
            rootID_val.nextSibling = newMemberRecursive(rootID_val.nextSibling, new_ID_val, new_income_val, new_cscore_val);
        }
        return rootID_val;
    }
    
    //method to search for a node by member ID
    public static memberNode search(int search_key) {
        return searchRecursive(rootID, search_key);
    }
    
    //searchRecursive method definition
    public static memberNode searchRecursive(memberNode rootID_key, int search_key_val) {
        if(rootID_key == null || rootID_key.memberID == search_key_val) {
            if(rootID_key == null) { 
                return rootID_key;
            } else if(rootID_key.memberID == search_key_val) {
                return rootID_key;
            }
        }
        if(search_key_val < rootID_key.memberID) {
            return searchRecursive(rootID_key.firstChild, search_key_val);
        } else {
            return searchRecursive(rootID_key.nextSibling, search_key_val);
        }
    }
    
    //method to print member information
    public void printMemberProfile(int member_id, memberNode account) {
        System.out.println("Running printMemberProfile method.");
        System.out.println("User ID: " + account.memberID);
        System.out.println("Monthly Income: $" + account.monthlyIncome);
        System.out.println("Credit Score: " + account.creditScore + "\n");
        //}
    }
    
    //method to list members in order by ID number
    public void listInOrder() {
        listInOrderRecursive(rootID);
    }
    
    //listInOrderRecursive method definition (userID)
    public void listInOrderRecursive(memberNode rootID_key) {
        if(rootID_key == null) {
            return;
        }
        listInOrderRecursive(rootID_key.firstChild);
        System.out.println("Member ID number: " + rootID_key.memberID + " ");
        System.out.println("Gross Monthly Income: " + rootID_key.monthlyIncome + " ");
        System.out.println("Credit score: " + rootID_key.creditScore + " \n");
        listInOrderRecursive(rootID_key.nextSibling);
    }
    
   //calcDTI method (userID, debt)
    public static double calcDTI(int member_id, double debt) {
        memberNode memberKey = search(member_id);
        double dtiVal = (debt / memberKey.monthlyIncome);
        System.out.println("DTI is " + dtiVal*100 + "%");
        return dtiVal;
    }
    
    //getAPR method (userID)
    public static double getAPR(int member_id) {
        memberNode memberKey = search(member_id);
        double interestRate = 0;
        int cScore = memberKey.creditScore;
        
        if ((cScore >= 300) && (cScore <= 499)) {
            interestRate = 0.18; //percent
        } else if ((cScore >= 500) && (cScore <= 679)) {
            interestRate = 0.12; //percent
        } else if ((cScore >= 680) && (cScore <= 779)) {
            interestRate = 0.07; //percent
        } else if ((cScore >= 780) && (cScore <= 850)) {
            interestRate = 0.02; //percent
        }
        System.out.println("APR percentage is " + interestRate*100 + "%.");
        return interestRate;
    }
    
    //getMaxMonthlyPayment method (userID, debt)
    public static double getMaxMonthlyPayment(int member_id, double debt) {
        memberNode memberKey = search(member_id);
        double dtiVal = calcDTI(member_id, debt);
        double maxLoanPercentage = 0.43 - dtiVal;
        double maxMonthlyPayment = maxLoanPercentage * memberKey.monthlyIncome;
        System.out.println("Max monthly payment is: $" + maxMonthlyPayment);
        return maxMonthlyPayment;
    }
    
    //runLoanInputPrompt method (userID)
    public static void runLoanInputPrompt(int member_id) {
        System.out.println("Initiating loan approval process.");
        
        Scanner loanPrompt = new Scanner(System.in);
        
        System.out.println("Enter monthly debt (rent, bills, other loans, etc) [Ex: 500 or 500.00] :");
        double debtInput = loanPrompt.nextDouble();
        
        System.out.println("Enter loan amount [5000.00 to 75000.00] : ");
        double loanInput = loanPrompt.nextDouble();
            while ((loanInput < 5000) || (loanInput > 75000)) {
                System.out.println("Loan amount is out of lending service range. Try again.");
                loanInput = loanPrompt.nextDouble();
            }
        
        System.out.println("Enter term length in years [1 to 7] : ");
        double termInput = loanPrompt.nextDouble();
        while ((termInput < 1) || (termInput > 7)) {
                System.out.println("Term length is out of lending service range. Try again.");
                termInput = loanPrompt.nextDouble();
            }
        
        getLoanApproval(member_id, debtInput, loanInput, termInput);
        
    }
    
    //getLoanApproval method (userID, debt, loanAmount, termLength)
    public static memberNode getLoanApproval(int member_id, double debt, double loanAmount, double termLength) {
        
        memberNode memberKey = search(member_id);
        
        if (((loanAmount >= 5000) && (loanAmount <= 75000)) && ((termLength >=1) && (termLength <= 7))) {
            System.out.println("Running loan approval.");
            
            double maxMonthlyPayment = getMaxMonthlyPayment(member_id, debt);
            double termLengthMonths = termLength * 12;
            
            if ((loanAmount / termLengthMonths) <= maxMonthlyPayment) {
                System.out.println("Loan is approved. Monthly payment is $" + (loanAmount/termLengthMonths) + ".");
                System.out.println("Total interest paid for auto loan of $" + loanAmount + " over " + termLength + 
                    " years is $" + ((getAPR(member_id) * loanAmount)) + "\n");
            } else if ((loanAmount / termLengthMonths) > maxMonthlyPayment) {
                System.out.println("Loan is not approved at this term length.");
                System.out.println("Max monthly payment is too high: $" + (loanAmount/termLengthMonths) + "\n" );
            }
        } else {
            System.out.println("Loan amount or term length is outside lending service range.");
        }
        return memberKey;
    }
    
    //runExitLoanLoop method (Scanner object, userID)
    public static void runExitLoanLoop (Scanner prompt, int id_in) {
        System.out.println("Enter 0 to exit. Enter 1 for loan approval.");
        int choice = prompt.nextInt();
            
        //method to loop this
            while ((choice != 0) && (choice != 1)) {
                System.out.println("Invalid input. Try again.");
                System.out.println("Enter 0 to exit. Enter 1 for loan approval.");
                choice = prompt.nextInt();
            }
            
            if (choice == 0) {
                System.out.println("Exiting");
                return;
            } else if (choice == 1) {
                runLoanInputPrompt(id_in);
                runExitLoanLoop(prompt, id_in);
                
            }
    }  
    
    //runNewMemberPrompt method (Scanner object, AutoLoanApp object)
    public static void runNewMemberPrompt (Scanner prompt, AutoLoanApp bank) {
        System.out.println("Creating new member account.");
        lastID++;
        
        System.out.println("Enter gross monthly income [Ex: 500 or 500.00] : ");
            double incomeInput = prompt.nextDouble();
            System.out.println("Enter credit score [300 - 850] : ");
            int cScoreInput = prompt.nextInt();
            
            while ((cScoreInput < 300) || (cScoreInput > 850)) {
                System.out.println("Credit score input is out of range. Try again.");
                System.out.println("Enter credit score [300 - 850] : ");
                cScoreInput = prompt.nextInt();
            }
            bank.newMember((lastID), incomeInput, cScoreInput);
            
            System.out.println("Account created. Your new Member ID is " + (lastID) + ".");
        
    }
    
    //runCustomerPrompt method (Scanner object, AutoLoanApp object)
    public static void runCustomerPromptLoop (Scanner prompt, AutoLoanApp bank) {
        System.out.println("Enter Member ID [100-999], enter 0 to create new member account, or enter 2 to stop.");
        int idInput = prompt.nextInt();
        
        if (idInput == 0) {
            runNewMemberPrompt(prompt, bank);
            runCustomerPromptLoop(prompt,bank);
        } else if ((idInput >= 100) && (idInput <= 999)) {
            memberNode profile = bank.search(idInput);
            
            if(profile != null) {
                bank.printMemberProfile(idInput, profile); //here
                runExitLoanLoop(prompt, idInput);
                runCustomerPromptLoop(prompt, bank);
            } else if (profile == null) {
                System.out.println("Member not found. Try again.");
                runCustomerPromptLoop(prompt, bank);
            }
            
        } else if (idInput == 2) {
            return;
        } else {
            System.out.println("Invalid input. Try again.");
            runCustomerPromptLoop(prompt, bank);
        }
        
    }
    
    //main
    public static void main(String[] args) {
        
        //initializing existing accounts
        AutoLoanApp testbank = new AutoLoanApp();
        testbank.newMember(100, 2000, 800);
        testbank.newMember(101, 1200, 750);
        testbank.newMember(102, 1400, 590);
        testbank.newMember(103, 2500, 400);
        
        //initializing integer variable to serve as pointer to the last ID number made
        lastID = 103;

        Scanner customerPrompt = new Scanner(System.in);
        System.out.println("Welcome to BankName. \n");
        
        testbank.listInOrder();
        
        runCustomerPromptLoop(customerPrompt, testbank);
       
        System.out.println("\nThanks for visiting BankName.");
        
    }
}
